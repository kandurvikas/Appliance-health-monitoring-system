from ast import Break
from ctypes import sizeof
from unittest import skip
import matplotlib.pyplot as plt
import numpy as np
import csv
import math
import spidev
import time
import pyrebase
import datetime
from time import *
import os
import time as time
from matplotlib.ticker import (AutoMinorLocator, MultipleLocator)
from datetime import time
from epsilon_code import epcode
epcode.getdebug("sk-jx6hZ9gZf20SmSXxhcc2T3BlbkFJhhnBPUZH1UDbfZReEAW","final line of the trace back with excat error message.")    
pf=0
i_amps=0
RealPower=0
'''
class current:
  def iamp(self,value):
     self.current=value

class powerfactor:
  def powfac(self,value):
     self.powerfactor=value
'''


def function():
 V_cal=1.765
 I_cal=1.45
 actual_V=228.5
 phase_correction_constant =44
 samples=6000 # samples for capturing raw data
 final_samples=248 # samples (assumed) for one cycle
 x = list(range(0,samples))
 y_v = []
 y_i = []
 time_axis_before_shift=list(range(0,final_samples))
 time_axis=list(range(0,final_samples-phase_correction_constant))
 voltage = []
 wave_shift_I = []
 wave_shift_V = []
 current = [] 

##########################################################    ADC - SPI protocol SECTION     ##################################################################

 spi = spidev.SpiDev()
 spi.open(0,0)
 spi.max_speed_hz=1000000

 def ReadChannel(channel):
   adc = spi.xfer2([1,(8+channel)<<4,0])
   data = ((adc[1]&3) << 8) + adc[2]
   return data

##########################################################    ZCD with polarity detection   ######################################################
 def zcd_polarity(y):
   i = 0
   while i<samples:
    #print(i)
     z = y[i]
     if(z==512):
       z1 = y[i+1]
      #print("zcd detected")
       if z1<z:
        #print("negative cycle")
         i=i+1
        #break
         continue
       else:
         if(i > samples - final_samples):
               print("warning - i =", i)
              #i=0
               break
         else:
               print("main index =", i)
               main_index = i
               return  main_index
               #break
     else:
      #print("last")
       i=i+1
       if(i>samples):
              i=0
       continue
  #return main_index
##########################################################    Capturing 500 raw samples     ##################################################################
 i = 0
 while i < samples:
   ch1 = ReadChannel(0)
   ch0 = ReadChannel(3)
   y_v.append(ch1)
   y_i.append(ch0)
   i=i+1

##########################################################    Selecting specific samples     #####################################################
 k=0
 k = zcd_polarity(y_v)
 main_index = k
 while k < (main_index+final_samples):
   temp1 = y_v[k]
   temp1 = temp1-512
   temp1 = temp1*V_cal
   wave_shift_V.append(temp1)
   temp2 = y_i[k]
   temp2 = temp2-512
   temp2 = temp2*I_cal
   wave_shift_I.append(temp2)
   k = k+1 

######################################################  wave shift   I   ####################
 print("size of wave shift I = ", len(wave_shift_I))
 skip_samples = phase_correction_constant
 while skip_samples<248:
   temp_shift = round(wave_shift_I[skip_samples],2)
   current.append(temp_shift)
   skip_samples += 1
 print("size of current = ", len(current))


######################################################  wave shift   V     ####################
 print("size of wave shift V = ", len(wave_shift_V))
 i = 0
 while i<(final_samples - phase_correction_constant):
   temp_shift = round(wave_shift_V[i],2)
   voltage.append(temp_shift)
   i += 1
 print("size of voltage = ", len(voltage))


##########################################################    RMS and Power Calculations    ##################################################################
#RMS
 def rms(VIP_array):
   i=0
   sumX = 0
   temp = []
   while(i < len(VIP_array)):
     sqX = VIP_array[i]*VIP_array[i]
     temp.append(sqX)
     sumX = sumX + temp[i]
     rms = math.sqrt(sumX / (final_samples - phase_correction_constant))
     i = i+1
   return rms

 v = round(rms(voltage),3)
 i_amps = round(rms(current)/100,3)
 ##i=current()
 ##i.iamp(i_amps)

# Real Power
 i=0
 sumP = 0
 temp_P = []
 while(i < len(voltage)):
   vi = voltage[i]*current[i]
   temp_P.append(vi)
   sumP = sumP + (temp_P[i]/100)
   RealPower = round(sumP / (final_samples - phase_correction_constant), 2)
   i = i+1
# Apparent Power
 apparent_power = round(v*i_amps,2)
# Power Factor
 pf = round(RealPower / apparent_power, 3)
 
 
##########################################################    Test Prints    ##################################################################

 print("V =", v, "volts")
 print("I =", i_amps, "Amps")
 print("Real_Power =", round(RealPower,2), "Watt")
 print("Apparent_Power =", round(apparent_power,2), "Volt-Amps")
 print("Power_Factor =", pf)
##########################################################    CSV SECTION    #############################################################

 appliance = "Bulb"
 import time
 today = time.ctime(time.time())
 d = [today,appliance]
 array = [d,voltage,current,["Voltage: "+str(v)+" V"],[str(actual_V)],["Current: "+str(i_amps)+" A"],["Voltage Cal: "+str(V_cal)],["Current Cal: "+str(I_cal)],["Real Power: "+str(RealPower)+" Watt"],["Apparent Power: "+str(apparent_power)+" VA"],["power factor: "+str(pf)],[" "]]
 with open("/home/rasp4/Desktop/nishith/s1.csv","a") as f :
     writer = csv.writer(f)
     writer.writerows(array)
 return v,i_amps,pf,RealPower




def avg(vo,res1,res2,res3 ):
 config = {
  
 
  
  "apiKey": "AIzaSyDtKa0SlZkV6xS5SQw_ydPqOAligtcYpdI",
  "authDomain": "database-1149.firebaseapp.com",
  "databaseURL": "https://database-1149-default-rtdb.firebaseio.com",
  "projectId": "database-1149",
  "storageBucket": "database-1149.appspot.com",
  "messagingSenderId": "932226693388",
  "appId": "1:932226693388:web:ae916b9bd93b621c04f129",
  "measurementId": "G-GD4LYB2SSG"

  }


 firebase = pyrebase.initialize_app(config)
 db = firebase.database()
 now = datetime.datetime.now()
 current_date = now.strftime("%d-%m-%Y")
 current_time = now.strftime("%H:%M:%S")

 data = {
        "RMSvalue": vo,
        "Powerfactor":result[1] ,
        "Current":  result[2],
        "Real_Power":result[3]
    }
# Set the value of "rms" under the date and time node
 rms_value = 123  # Replace with your desired value of "rms"
 db.child("data").child(current_date).child(current_time).set(data)
 return





import time
data = []
start_time = time.time()
result=[]
while True:
    
    if (time.time() - start_time) > 5: 

        result=function()
        data.append(result[0])
        start_time = time.time()

    
    if len(data) == 12 or (time.time() - start_time) > 70: 
        print (*data)
        ##for i in range(len(data)):
         ##   if 227 > data[i] > 230:
          ##      data[i] = None 
        ##average = sum(filter(None, data)) / len(list(filter(None, data))) 
        print("I =", i_amps, "Amps")
        print("Real_Power =", round(RealPower,2), "Watt")
        print("Power_Factor =", pf)
        filtered_list = [x for x in data if x <= 232 and x >= 225]
        if filtered_list:
          average = sum(filtered_list) / len(filtered_list)
          avg(average,result[1],result[2],result[3])

    
          ##print("Average for this hour:", average)
        data.clear()
      


               
